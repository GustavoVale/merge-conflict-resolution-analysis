plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'eclipse'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir 'test'
        }
        resources {
            srcDir 'resources'
        }
    }
}

repositories {
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    compile 'commons-io:commons-io:2.5'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'com.sun.activation:javax.activation:1.2.0'
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.3.0.201604071810-r'
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.3.0.201604071810-r'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'
    compile 'mysql:mysql-connector-java:8.0.16'

    compile project(':GitWrapper')
    compile project(':GitHubWrapper')
    
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile 'org.mockito:mockito-core:2.+'
    compile 'junit:junit:4.12'
    compile 'org.mockito:mockito-core:2.+'

    implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.1'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

compileJava {
    options.compilerArgs << "-Xlint:all"
}

startScripts {
   applicationName = rootProject.name
   mainClassName = "commnet.CN_Main"
}

task extraScripts(type: CreateStartScripts) {
    applicationName = "${rootProject.name}_extra"
    mainClassName = 'commnet.extra.Extra_Main'
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

distributions.with {
	main.with {
		def binDir = 'bin'

        contents {
            into(binDir) {
                from(extraScripts)
                fileMode = 0755
            }
		}
	}
}

run {
    if ( project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
    }
    main = startScripts.mainClassName
}
